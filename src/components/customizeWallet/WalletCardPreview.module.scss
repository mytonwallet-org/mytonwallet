@use "sass:math";

@use "../../styles/mixins";

@use "../../styles/scssVariables" as v;

$portraitBaseBalanceSize: 2.625rem;
$signSizeDiff: 0.25rem;
$color-transition: color 300ms;
$previewCardWidth: 17.125rem;
$previewCardHeight: 11rem;

:global {
  :root {
    --preview-card-height: #{$previewCardHeight};
    --preview-card-width: #{$previewCardWidth};
  }
}

.containerWrapper {
  position: absolute;
  top: 0;
  margin: 1rem;
  padding-top: v.$cardAspectRatio;
}

.container {

  $gradientColor1: rgba(243, 244, 245, 0.6);
  $gradientColor2: rgba(243, 244, 245, 0);
  $gradientColor3: rgba(0, 0, 0, 0.6);
  $gradientColor4: rgba(0, 0, 0, 0);
  --main-text: var(--color-card-text);
  --second-text: var(--color-card-second-text);

  position: absolute;
  top: 0;
  left: 50% !important;
  transform: translateX(-50%);

  display: flex;
  flex-direction: column;
  justify-content: flex-start;

  width: 100%;
  height: 100%;
  border-radius: var(--border-radius-card);

  background-image: url("../../assets/cards/card.jpg"), linear-gradient(125deg, #{v.$defaultCardGradient});
  background-clip: border-box, padding-box, padding-box;
  background-origin: border-box;
  background-size: cover, cover;

  &.left, &.right {
    &::before {
      pointer-events: none;
      content: "";

      position: absolute;
      z-index: 2;
      top: 0;
      bottom: 0;

      width: 20%; // The visible edge of the card is 20% of the card width
    }
  }

  &.left {
    left: 0% !important;
    transform: translateX(-80%) scale(0.86); // 20% of the card width

    &::before {
      right: 0;
      border-top-right-radius: var(--border-radius-card);
      border-bottom-right-radius: var(--border-radius-card);
      background: linear-gradient(
        90deg,
        $gradientColor1 0%,
        $gradientColor2 100%
      );
      :global(html.theme-dark) & {
        background: linear-gradient(
          90deg,
          $gradientColor3 0%,
          $gradientColor4 100%
        );
      }
    }
  }

  &.right {
    left: 100% !important;
    transform: translateX(-20%) scale(0.86); // 20% of the card width

    &::before {
      left: 0;
      border-top-left-radius: var(--border-radius-card);
      border-bottom-left-radius: var(--border-radius-card);
      background: linear-gradient(
        90deg,
        $gradientColor2 0%,
        $gradientColor1 100%
      );
      :global(html.theme-dark) & {
        background: linear-gradient(
          90deg,
          $gradientColor4 0%,
          $gradientColor3 100%
        );
      }
    }
  }

  &.middle {
    z-index: 2;
  }

  &:global(.tegro) {
    background-image: url("../../assets/cards/card_tegro.jpg"), linear-gradient(125deg, #5E95DD 0, #4469D4 100%);
  }

  &:global(.red) {
    background-image: url("../../assets/cards/card_red.jpg"), linear-gradient(125deg, #C46D63 0, #A54C4E 100%);
  }

  &:global(.orange) {
    background-image: url("../../assets/cards/card_orange.jpg"), linear-gradient(125deg, #C49D5B 0, #B67C47 100%);
  }

  &:global(.green) {
    background-image: url("../../assets/cards/card_green.jpg"), linear-gradient(125deg, #72AB78 0, #609554 100%);
  }

  &:global(.sea) {
    background-image: url("../../assets/cards/card_sea.jpg"), linear-gradient(125deg, #6097C1 0, #4583A3 100%);
  }

  &:global(.purple) {
    background-image: url("../../assets/cards/card_purple.jpg"), linear-gradient(125deg, #7A6DD8 0, #634CBB 100%);
  }

  &:global(.pink) {
    background-image: url("../../assets/cards/card_pink.jpg"), linear-gradient(125deg, #AD6691 0, #A14F8F 100%);
  }
}

.customCardManager, .containerInner, .container {
  position: absolute;
  top: 0;
  left: 0;

  width: $previewCardWidth;
  height: $previewCardHeight;
  padding-top: 0;
}

.containerInner {
  position: absolute;
  z-index: 1;
  top: 0;
  left: 0;

  display: flex;
  flex-direction: column;
  flex-grow: 1;
  align-items: center;
  justify-content: center;

  width: $previewCardWidth;
  height: $previewCardHeight;
  padding: 1rem;

  color: var(--main-text);

  &:global(.MtwCard__darkText) {
    --main-text: var(--color-card-text-dark);
    --second-text: var(--color-card-second-text-dark);
  }

  &:global(.MtwCard__lightText) {
    --main-text: var(--color-card-text);
    --second-text: var(--color-card-second-text);
  }
}

.walletName {
  margin-bottom: 0.5rem;

  font-size: 1rem;
  font-weight: 600;
  line-height: 1.25rem;
  color: var(--main-text);

  opacity: 0.9;
}

.currencySwitcher {
  display: flex;
  gap: 0.0625rem;
  align-items: baseline;
  line-height: 3.5rem;
}

.currencySymbol {
  margin-bottom: 0.5rem;
  font-size: calc(($portraitBaseBalanceSize - $signSizeDiff) * var(--font-size-scale-preview, 1));
  color: var(--second-text);

  :global(.glare-text) & {
    color: transparent;
  }

  @include mixins.transition($color-transition);
}

.primaryValue {
  position: absolute;
  top: 3.5rem; // ~ at the middle of the card

  font-size: calc($portraitBaseBalanceSize * var(--font-size-scale-preview, 1));
  font-weight: 850;
  line-height: 1;
  color: var(--main-text);
  letter-spacing: -0.04375rem;

  @include mixins.transition($color-transition);
}

.primaryFractionPart {
  font-size: calc(2.375rem * var(--font-size-scale-preview, 1));
  font-weight: 800;
  color: var(--second-text);

  :global(.glare-text) & {
    color: transparent;
  }

  @include mixins.transition($color-transition);
}

.chip {
  display: inline-flex;
  gap: 0.375rem;
  align-items: center;
  align-self: flex-start;

  padding: 0.375rem 0.75rem;
  border-radius: 1rem;

  font-size: 0.75rem;
  font-weight: 500;

  background: rgba(255, 255, 255, 0.2);
  backdrop-filter: blur(10px);
}

.chipText {
  color: white;
}
